const express = require('express');
const cors = require('cors');
const app = express();
const port = 3001;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));

// Mock processing delay to simulate AWS processing
const simulateProcessing = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Mock transcription function
const mockTranscription = (audioData) => {
  // Simulate different transcriptions based on audio length
  const mockTranscripts = [
    "Hello everyone, today I want to talk about the importance of public speaking and how it can improve your communication skills.",
    "Good morning, thank you for having me here today. I'm excited to share with you some insights about presentation techniques.",
    "Welcome to my presentation on effective communication. Let me start by discussing the key principles of successful public speaking.",
    "Thank you for joining me today. I'll be covering three main points: preparation, delivery, and feedback in public speaking.",
    "Hello and welcome to my talk about presentation skills. I believe that everyone can become a better speaker with practice."
  ];
  
  // Return a random transcript
  return mockTranscripts[Math.floor(Math.random() * mockTranscripts.length)];
};

// Mock Nova Sonic analysis
const mockNovaSonicAnalysis = (transcript) => {
  const wordCount = transcript.split(' ').length;
  const duration = wordCount / 150; // Estimate duration
  
  // Generate confidence score based on content
  let confidence = 70 + Math.random() * 20; // 70-90 range
  
  // Add some variation based on content
  if (transcript.toLowerCase().includes('um') || transcript.toLowerCase().includes('uh')) {
    confidence -= 10;
  }
  
  if (wordCount < 20) {
    confidence -= 15;
  }
  
  confidence = Math.max(40, Math.min(95, confidence));
  
  // Generate pronunciation mistakes
  const pronunciationMistakes = [];
  if (transcript.toLowerCase().includes('um') || transcript.toLowerCase().includes('uh')) {
    pronunciationMistakes.push("Reduce filler words (um, uh)");
  }
  
  if (wordCount < 30) {
    pronunciationMistakes.push("Consider expanding your content");
  }
  
  if (transcript.length < 100) {
    pronunciationMistakes.push("Practice speaking at a more natural pace");
  }
  
  // Generate overall feedback
  let overallFeedback = `Your presentation was approximately ${duration.toFixed(1)} minutes long with ${wordCount} words. `;
  
  if (confidence >= 80) {
    overallFeedback += "Excellent delivery! You demonstrated strong confidence and clear articulation. ";
  } else if (confidence >= 60) {
    overallFeedback += "Good effort! Your presentation was clear and engaging. ";
  } else {
    overallFeedback += "You have potential! With more practice, you'll improve significantly. ";
  }
  
  overallFeedback += "Consider practicing more to build confidence and reduce any filler words.";
  
  return {
    confidence: confidence,
    pronunciationMistakes: pronunciationMistakes,
    overallFeedback: overallFeedback,
    wordCount: wordCount,
    duration: duration
  };
};

// Mock audio feedback generation
const mockAudioFeedback = (feedback) => {
  // Return a base64 encoded placeholder audio
  // In a real implementation, this would be generated by Nova Sonic speech-to-speech
  return "data:audio/mp3;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT";
};

// Main processing endpoint
app.post('/process-recording', async (req, res) => {
  try {
    console.log('📝 Processing recording request...');
    
    const { audioData, audioFormat, sampleRate } = req.body;
    
    if (!audioData) {
      return res.status(400).json({ error: 'No audio data provided' });
    }
    
    // Simulate processing delay (2-5 seconds)
    const processingTime = 2000 + Math.random() * 3000;
    console.log(`⏳ Simulating processing for ${processingTime.toFixed(0)}ms...`);
    await simulateProcessing(processingTime);
    
    // Mock transcription
    console.log('🎤 Simulating transcription...');
    const transcript = mockTranscription(audioData);
    
    // Mock Nova Sonic analysis
    console.log('🤖 Simulating Nova Sonic analysis...');
    const analysis = mockNovaSonicAnalysis(transcript);
    
    // Generate feedback
    const feedback = {
      confidence: analysis.confidence,
      pronunciationMistakes: analysis.pronunciationMistakes,
      overallFeedback: analysis.overallFeedback
    };
    
    // Generate audio feedback
    console.log('🔊 Generating audio feedback...');
    const audioFeedback = mockAudioFeedback(feedback);
    
    console.log('✅ Processing completed successfully!');
    
    res.json({
      confidence: feedback.confidence,
      pronunciationMistakes: feedback.pronunciationMistakes,
      overallFeedback: feedback.overallFeedback,
      audioFeedback: audioFeedback
    });
    
  } catch (error) {
    console.error('❌ Error processing recording:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'Mock server is running' });
});

// Start server
app.listen(port, () => {
  console.log(`🚀 Mock server running at http://localhost:${port}`);
  console.log(`📝 Process recording endpoint: http://localhost:${port}/process-recording`);
  console.log(`🏥 Health check: http://localhost:${port}/health`);
  console.log('');
  console.log('💡 To test the application:');
  console.log('   1. Keep this server running');
  console.log('   2. Open http://localhost:3000 in your browser');
  console.log('   3. Click "Start Recording" and speak for a few seconds');
  console.log('   4. Click "Stop Recording" to see the mock feedback');
}); 